#!/usr/bin/python
#prueba de cgi
import time 
import MySQLdb
import cgi
import cgitb
import random
from FlowQueries import *
cgitb.enable()


print("Content-Type: text/html\n")

class runpage:

	input=[]
	output=[]
	

	def __init__(self):

		self.displayheader()
	#	self.displayform()
		h={}
		
		h=self.createhash()	
		self.leerhash(hash)





	def displayheader(self):
		print("""
		<html>
	
		<head> 
	

 		<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
		<title>Sunburst - Connected Sunburst</title>
		<!-- CSS Files -->
		<link type="text/css" href="Jit/Examples/css/base.css" rel="stylesheet" />
		<link type="text/css" href="Jit/Examples/css/Sunburst.css" rel="stylesheet" />

 		<p>MAS VALE Q ESTO APARESCA</p>
		<!--[if IE]><script language="javascript" type="text/javascript" src="http://	larange.ccom.uprrp.edu/~albert/Jit/Extras/excanvas.js"></script><![endif]-->

		<!-- JIT Library File -->
		<script language="javascript" type="text/javascript" src="http://lagrange.ccom.uprrp.edu/~albert/Jit/jit.js"></script>



		""")
		#hash2=self.createhash()
		#self.leerhash(hash2)
		print("""

		<style type="text/css">
		h1{font-size:30px;color:black;background-color:white}
		.body_back {background-image:url('redbackground.png');background-repeat:no-repeat;width:100%;height:100%;color:white}
		p {background-color:black;color:white;text-align:center}
		table {background-color:black}
		</style>
		
		</head>
		<body class="body_back" onload="init();"> """) 


		print("""	
		
		
		<h1>Ingrese la informacion requerida</h1>
	


	
		<p>Alberts Writing Space for Random Stuff</p>
		<table style=width:50%;height:20px;color:white;background-color:black>
		<tr><td></td></tr></table><br/><br/>
		""")
	def displayform(self):

		print("""<table>
			<tr><td> <form name="input" method="get" method="post" style="text-align:left" action="graphic.cgi">


		Titulo de la grafica <input type="text" name="titulo"/><br/><br/>

		Campus <input type="text"name="campus"/><br/><br/>
		
		Metodo de Grafica:
			<select name="metodo">
			<option value="random"> Generar Valores Aleatorios </option>
			<option value="leer"> Leer los Valores de la Base de Datos </option>
			</select><br/><br/>
	
		Ports:
			<select name="ports">

			<option value="22">22</option>
			<option value= "23">23</option>
			<option value= "24">24</option>
			<option value ="25">25</option>

			</select> <br/><br/>

		<input type="submit" name="submit" value="submit"/><br/><br/></td>""")


	def checkempty(self,form):
		form=cgi.FieldStorage()
		

		if "titulo" not in form or "campus" not in form or "ports" not in form:
			return 1;

	def createdata(self):

		self.input=[]

		for i in range(10):
			self.input.append(random.randint(1,1000))
		
			self.output=[]
		for n in range(10):
			self.output.append(random.randint(1,1000))
	def displayFooter(self):
		print (""" </body></html>""")

	def creategraph(self,form):
	

		print("""<td>
    
    			<script type="text/javascript" src="http://www.google.com/jsapi"></script>
   			 <script type="text/javascript">
    			  google.load('visualization', '1', {packages: ['corechart']});
   			 </script>
   			 <script type="text/javascript">
      			function drawVisualization() {
       			 // Create and populate the data table.
        		var data = new google.visualization.DataTable();""")


 		print("""data.addColumn('number','year');""")
		print("""data.addColumn('number','sales');""")
		print("""data.addColumn('number','growth');""")


		print("""data.addRows(10);""")
		for i in range(len(self.output)):
			for j in range(3):
				print("""data.setValue(%i,%i,%i)""")%(i,j,self.input[i])       
       	    

  		print(""" new google.visualization.ColumnChart(document.getElementById('visualization')).
      			draw(data,
         		  {title:"%s",
            		width:600, height:400,
            		hAxis: {title: "%s"}}
      					);
				}
			/form
google.setOnLoadCallback(drawVisualization);</script>
			<div id="visualization"></div></td></tr></table>""")%(form["ports"].value,form["campus"].value)


	def insertmysql(self) :
		db=MySQLdb.connect("localhost","albert","Al11235*!#@!","albert")
		c=db.cursor()
		
		
		for x in range(5):
			for i in range (5):
				sql="""insert into net2net values(%i,%i,%i);"""%(x+1,i+1,random.randint(0,100))
				c.execute(sql)
	
		db.close();


	def graphmysql(self):
			
		db=MySQLdb.connect("localhost","albert","Al11235*!#@!","albert")
         	c=db.cursor()
        	sql="SELECT tiempo, datos  FROM network_info;"
        	c.execute(sql)
         	tiempoydata=c.fetchall()
      
		
		
		print("""<td>
    
   		 <script type="text/javascript" src="http://www.google.com/jsapi"></script>
   		<script type="text/javascript">
      		google.load('visualization', '1', {packages: ['corechart']});
    		</script>
    		<script type="text/javascript">
      		function drawVisualization() {
        	// Create and populate the data table.
        	var data = new google.visualization.DataTable();""")


	     	print("""data.addColumn('number','tiempo');""")
		print("""data.addColumn('number','datos');""")
		print("""data.addRows(%i);""")%(len(tiempoydata))
		
			
		for i in range(len(tiempoydata)):
			for x in range (2):	
					print("""data.setValue(%i,%i,%i)""")%(i,x,tiempoydata[i][x])
		
       		print(""" new google.visualization.ColumnChart(document.getElementById('visualization')).
      				draw(data,
           			{title:"bla",
           			width:600, height:400,
            			hAxis: {title: "ble"}}
      						);
						}
			google.setOnLoadCallback(drawVisualization);</script>
			<div id="visualization"></div></td></tr></table>""") 


	def createhash (self):
		
		now=self.getnowtime() 
		db=MySQLdb.connect("localhost","root","rootitg","flows")
		c=db.cursor()
		#sql="""select id from network"""
		#c.execute(sql)
		#idlist=c.fetchall()
		
		idlist=GetNetworks(c)
		
		hash={}
		for i in range(len(idlist)):
			
			hash[idlist[i][0]]={}
			#sql=("""select idto, data from network, net2net where id=idfrom and id = %i""")%(i+1)
			#c.execute(sql)
			#idto=c.fetchall()
			idto=GetNetwork2(c,idlist[i][0])
			
			
			
			for m in range(len(idto)):
				
				hash[idlist[i][0]][idto[m][2]]=GetNetwork2(c,idlist[i][0],idto[m][2],now)
		return hash
	def leerhash(self,hash):
	
		db=MySQLdb.connect("localhost","root","rootitg","flows")
		c=db.cursor()
		print("""
			<tr><td>

			<script type="text/javascript">

  			var labelType, useGradients, nativeTextSupport, animate;




			(function() {
  			var ua = navigator.userAgent,
      			iStuff = ua.match(/iPhone/i) || ua.match(/iPad/i),
      			typeOfCanvas = typeof HTMLCanvasElement,
      			nativeCanvasSupport = (typeOfCanvas == 'object' || typeOfCanvas == 'function'),
      			textSupport = nativeCanvasSupport
        		&& (typeof document.createElement('canvas').getContext('2d').fillText == 				'function');
  			//I'm setting this based on the fact that ExCanvas provides text support for IE
  			//and that as of today iPhone/iPad current text support is lame
  			labelType = (!nativeCanvasSupport || (textSupport && !iStuff))? 'Native' : 'HTML';
  			nativeTextSupport = labelType == 'Native';
  			useGradients = nativeCanvasSupport;
  			animate = !(iStuff || !nativeCanvasSupport);})();

			var Log = {
  			elem: false,
  			write: function(text){
    			if (!this.elem)
      			this.elem = document.getElementById('log');
    			this.elem.innerHTML = text;
    			this.elem.style.left = (500 - this.elem.offsetWidth / 2) + 'px';
  						}

				};


			function init(){

  			//init data
  			var json = [
      			//"root" node is invisible
				{
				"id" : "root" ,
				"name" :"" ,
				"data" :{
				"$type": "none" 
				},"adjacencies": [
				{""")
	
		From=hash.keys()
		for i in range(len(From)):
			if From[0]==From[i]:

				print("""
					"nodeTo": "%s",
					"data": {
					'$type': 'none'
						}
		  			}""")%(From[i][0])
			else:
	
				print(""",{
					"nodeTo": "%s",
					"data": {
					'$type': 'none'
						  }
		  				}
					""")%(From[i][0])
		print("""]
			},""")
	
	
	

		colors=[3452,1245,6502,2456,6543]
		

		for i in range(len(From)):
			if From[i] == From[0]:
				print("""
      					{
        				"id": "%s",
 				       "name": "%s",
        				"data": {
          					"$angularWidth" :10,
	 					 "$color" : "%i",
	  					"$height": 50
        					},
					"adjacencies":[ """)%(From[i][0],self.getlabel(c,From[i][0]),colors[i])
		 	
				to=hash[From[i]].keys()
				for x in range(len( to)) :
					
					if to[x]== to[0]:
       						
       						print("""  {  
             						"nodeTo": "%s",  
             						"data": {  
               						"$color": "%s",  
               						"$lineWidth": 4  
             							}								  
           						
           						} """) %(to[x],self.getcolor(hash[From[i]][to[x]]))
					else:
						print(""",{  
                                                        "nodeTo": "%s",  
                                                        "data": {  
                                                        "$color": "%s",  
                                                        "$lineWidth": 4  
                                                                }                                                                 
                                                        
           						} """) %(to[x],self.getcolor(hash[From[i]][to[x]]))
				print (""" 		] 
					}""")

			else:
			
				print("""
      					,{
        				"id": "%s",
        				"name": "%s",
        				"data": {
          					 "$angularWidth" : 10,
	  					"$color" : "%i",
	  					"$height": 50
        						},
					"adjacencies":[ """)%(From[i][0],self.getlabel(c,From[i][0]),colors[i])
		 		

				to=hash[From[i]].keys()

				for x in range(len(to)):
					#print 
					#hash[From[i]][to[x]]
                                          
					if to[x]== to[0]:
       						print("""  {  
             						"nodeTo": "%s",  
             						"data": {  
               						"$color": "%s",  
               						"$lineWidth": 4  
             							}								  
           						} """) %(to[x],self.getcolor(hash[From[i]][to[x]]))
					
					else:
						print(""",{  
                                                        "nodeTo": "%s",  
                                                        "data": {  
                                                        "$color": "%s",  
                                                        "$lineWidth": 4  
                                                                }                                                                 
                                                        } """) %(to[x],self.getcolor(hash[From[i]][to[x]]))
  
				print ("""		]
					}""")
				
			

		print(""" ];""")
		print("""//end
  //init Sunburst
  var sb = new $jit.Sunburst({
    //id container for the visualization
    injectInto: 'infovis',
    //Change node and edge styles such as
    //color, width, lineWidth and edge types
    Node: {
      overridable: true,
      type: useGradients? 'gradient-multipie' : 'multipie'
    },
    Edge: {
      overridable: true,
      type: 'hyperline',
      lineWidth: 2,
      color: '#777'
    },
    //Draw canvas text. Can also be
    //'HTML' or 'SVG' to draw DOM labels
    Label: {
      type: nativeTextSupport? 'Native' : 'SVG'
    },
    //Add animations when hovering and clicking nodes
    NodeStyles: {
      enable: true,
      type: 'Native',
      stylesClick: {
        'color': '#33dddd'
      },
      stylesHover: {
        'color': '#dd3333'
      },
      duration: 700
    },
    Events: {
      enable: true,
      type: 'Native',
      //List node connections onClick
      onClick: function(node, eventInfo, e){
        if (!node) return;
        var html = "<h4>" + node.name + " connections</h4><ul><li>", ans = [];
        node.eachAdjacency(function(adj){
          // if on the same level i.e siblings
            if (adj.nodeTo._depth == node._depth) {
              ans.push(adj.nodeTo.name);
            }
          });
        $jit.id('inner-details').innerHTML = html + ans.join("</li><li>") + "</li></ul>";
      }
    },
    levelDistance: 190,
    // Only used when Label type is 'HTML' or 'SVG'
    // Add text to the labels. 
    // This method is only triggered on label creation
    onCreateLabel: function(domElement, node){
 
     var labels = sb.config.Label.type;
      if (labels === 'HTML') {
        domElement.innerHTML = node.name;
      } else if (labels === 'SVG') {
        domElement.firstChild.appendChild(document.createTextNode(node.name));
      }
    },
    // Only used when Label type is 'HTML' or 'SVG'
    // Change node styles when labels are placed
    // or moved.
    onPlaceLabel: function(domElement, node){
      var labels = sb.config.Label.type;
      if (labels === 'SVG') {
        var fch = domElement.firstChild;
        var style = fch.style;
        style.display = '';
        style.cursor = 'pointer';
        style.fontSize = "0.8em";
        fch.setAttribute('fill', "#fff");
      } else if (labels === 'HTML') {
        var style = domElement.style;
        style.display = '';
        style.cursor = 'pointer';
        if (node._depth <= 1) {
          style.fontSize = "0.8em";
          style.color = "eddd";
        } 
        var left = parseInt(style.left);
        var w = domElement.offsetWidth;
        style.left = (left - w / 2) + 'px';
      }
    }
  });
  // load JSON data.
  sb.loadJSON(json);
  // compute positions and plot.       
  sb.refresh();
  //end
}</script>

<div id="container">

<div id="center-container">
    <div id="infovis"></div>   
</div>
<div id="right-container">


<div id="inner-details"></div> 
</div>
</td></tr>
""")

	def GetNetwork2Data(c,f,to,now):
		sql=("""Select ioctect,ooctect,ipacks,opacks from rrd_to_net where n_id=%i and to_id=%i and time_unix=%i""")%(f,to,now)
		c.execute(sql)
		data=c.fetchone()
		datasum=data[0]+data[1]
		return datasum
	
	def getnowtime(self):
		unixtime=time.time()
		unixtime=unixtime-300
		return unixtime
		

	def getlabel(self,c,id):
		sql=("""select label from network where id = %i""")%(id)
		c.execute(sql)
		label= c.fetchone()
		return label[0]
		
		
	def getcolor(self,data):
		green="#0B610B"
		red="#DF0101"
		black="#000000"
		if data <=0:
			return black
		elif data >=75:
			return red
		else: 
			return green





mainpage=runpage()
#mainpage.createdata()
hash={}
#hash=mainpage.createhash()
#mainpage.insertmysql()
form=cgi.FieldStorage()
mainpage.displayFooter()
if "submit"  in form:
		empty=mainpage.checkempty(form)
		if empty == 1:
			print("""<p style=background-color:red> ERROR: favor de llenar la informacion</p><br><br>""")
		else:
			if form["metodo"].value=="leer":
				mainpage.graphmysql()
			else:
				

				mainpage.creategraph(form)
			mainpage.displayFooter()

